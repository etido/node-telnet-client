var fs = require('fs');

// Constructor
var ConfigManager = function (url) {
    var self = this;
    this.url = url;

    fs.watchFile(url, function (curr, prev) {
        if (curr.mtime != prev.mtime) {
            self.readContent(url);
        }
    });
    this.readContentSync(url);
}

// properties and methods
ConfigManager.prototype = {
    url: '',
    currentConfig: undefined,
    error: undefined,
    handlers: [],

    getConfig: function (handler) {

        if (handler != undefined) {
            if (this.error == undefined && this.currentConfig != undefined) {
                return handler(undefined, this.currentConfig);
            } else {
                return handler(this.error, undefined);
            }
        } else {
            return this.currentConfig;
        }

    },

    readContent: function (url) {
        var self = this;
        fs.readFile(url, function (err, content) {
            if (!err) {
                try {
                    var newConfig = JSON.parse(content);
                    self.currentConfig = newConfig;
                } catch (err) {

                }
                self.error = undefined;


                if (self.handlers.length > 0) {
                    notifyHandlers(self.handlers);
                }

            } else {
                self.error = err;
            }
        });
    },

    readContentSync: function (url) {
        var self = this;
        self.currentConfig = JSON.parse(fs.readFileSync(url, 'utf8'));
    },

    onChange: function (handler) {
        this.handlers.push(handler);
    }
}

function notifyHandlers(handlers) {
    for (var i = 0; i < handlers.length; i++) {
        handlers[i]();
    }
}


// node.js module export
module.exports = ConfigManager;